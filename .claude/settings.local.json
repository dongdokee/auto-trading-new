{
  "permissions": {
    "allow": [
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/test_risk_controller.py::TestRiskController::test_should_update_drawdown_correctly_when_equity_decreases -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/test_risk_controller.py -k \"drawdown or consecutive\" -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/test_risk_controller.py::TestRiskController::test_should_update_high_water_mark_when_equity_increases -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/test_risk_controller.py -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/test_position_sizing.py -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -c \"\nimport numpy as np\nfrom src.risk_management.risk_management import RiskController\nfrom src.risk_management.position_sizing import PositionSizer\n\n# Create test data\nrisk_controller = RiskController(initial_capital_usdt=10000.0)\nposition_sizer = PositionSizer(risk_controller)\n\nsample_signal = {\n    ''symbol'': ''BTCUSDT'',\n    ''side'': ''LONG'',\n    ''strength'': 0.8,\n    ''confidence'': 0.7\n}\n\nsample_market_state = {\n    ''symbol'': ''BTCUSDT'',\n    ''price'': 50000.0,\n    ''atr'': 2000.0,\n    ''daily_volatility'': 0.05,\n    ''regime'': ''NEUTRAL'',\n    ''min_notional'': 10.0,\n    ''lot_size'': 0.001,\n    ''symbol_leverage'': 10\n}\n\nsample_portfolio_state = {\n    ''equity'': 10000.0,\n    ''recent_returns'': np.array([0.01, -0.005, 0.015, -0.02, 0.008]),\n    ''positions'': [],\n    ''current_var_usdt'': 0.0,\n    ''symbol_volatilities'': {''BTCUSDT'': 0.05},\n    ''correlation_matrix'': {}\n}\n\n# Test each component\nprint(''=== Debug Position Sizing Components ==='')\nkelly_size = position_sizer._calculate_kelly_based_size(sample_signal, sample_market_state, sample_portfolio_state)\nprint(f''Kelly size: {kelly_size}'')\n\natr_size = position_sizer._calculate_atr_based_size(sample_signal, sample_market_state, sample_portfolio_state)\nprint(f''ATR size: {atr_size}'')\n\nliquidation_safe_size = position_sizer._calculate_liquidation_safe_size(''BTCUSDT'', ''LONG'', sample_market_state, sample_portfolio_state)\nprint(f''Liquidation safe size: {liquidation_safe_size}'')\n\nvar_constrained_size = position_sizer._calculate_var_constrained_size(''BTCUSDT'', sample_market_state, sample_portfolio_state)\nprint(f''VaR constrained size: {var_constrained_size}'')\n\ncorrelation_factor = position_sizer._calculate_correlation_adjustment(''BTCUSDT'', sample_portfolio_state)\nprint(f''Correlation factor: {correlation_factor}'')\n\nprint(f''Min of all: {min(kelly_size, atr_size, liquidation_safe_size, var_constrained_size)}'')\n\nfinal_size = position_sizer.calculate_position_size(sample_signal, sample_market_state, sample_portfolio_state)\nprint(f''Final position size: {final_size}'')\n\")",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -c \"\nimport numpy as np\nfrom src.risk_management.risk_management import RiskController\n\n# Test Kelly calculation directly\nrisk_controller = RiskController(initial_capital_usdt=10000.0)\nrecent_returns = np.array([0.01, -0.005, 0.015, -0.02, 0.008])\n\nprint(''Kelly fraction calculation:'')\nprint(f''Recent returns: {recent_returns}'')\nprint(f''Length: {len(recent_returns)}'')\n\nkelly_fraction = risk_controller.calculate_optimal_position_fraction(\n    recent_returns,\n    regime=''NEUTRAL'',\n    fractional=0.25\n)\n\nprint(f''Kelly fraction: {kelly_fraction}'')\n\n# Test with more data\nextended_returns = np.random.normal(0.001, 0.02, 50)  # 50 days of returns\nkelly_fraction_extended = risk_controller.calculate_optimal_position_fraction(\n    extended_returns,\n    regime=''NEUTRAL'',\n    fractional=0.25\n)\nprint(f''Kelly fraction with extended data: {kelly_fraction_extended}'')\n\")",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/test_position_sizing.py::TestPositionSizer::test_should_calculate_basic_position_size_for_long_signal -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/test_position_management.py -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/ -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/test_integration.py -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/ -v --tb=short)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_utils/test_logger.py -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_utils/test_logger.py::TestTradingLogger::test_should_create_trading_logger_with_default_config -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_utils/test_logger.py::TestTradingLogger -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_utils/test_logger.py::TestTradeContext -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_utils/test_logger.py::TestSensitiveDataFilter -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_utils/test_logger.py::TestLoggingPerformance::test_should_handle_high_frequency_logging_efficiently -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_utils/test_logger.py::TestStructuredLogging -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/test_risk_controller.py::TestRiskController::test_should_create_risk_controller_with_default_config -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/test_risk_controller.py -k \"create\" -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/test_risk_controller.py --collect-only)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/test_risk_controller.py::TestRiskController::test_should_initialize_with_correct_usdt_capital -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_risk_management/test_risk_controller.py::TestRiskController::test_should_detect_var_limit_violation -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/integration/test_risk_management_integration.py -v)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/ -v --tb=short)",
      "Bash(\"/c/Users/dongd/anaconda3/envs/autotrading/python.exe\" -m pytest tests/unit/test_utils/test_logger.py::TestStructuredLogging::test_should_output_valid_json_format -v)"
    ],
    "deny": [],
    "ask": []
  }
}